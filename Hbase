import happybase
import pandas as pd
from datetime import datetime

# Función principal para manejar la conexión y operaciones
def main():
    try:
        # 1. Establecer conexión con HBase
        connection = happybase.Connection('localhost')
        connection.open()
        print("Conexión establecida con HBase")

        # 2. Crear la tabla con las familias de columnas
        table_name = 'used_cars'
        families = {
            'basic': dict(),     # Información básica del coche
            'specs': dict(),     # Especificaciones técnicas
            'sales': dict(),     # Información de venta
            'condition': dict()  # Estado del vehículo
        }

        # Eliminar la tabla si ya existe
        if table_name.encode() in connection.tables():
            print(f"Eliminando tabla existente - {table_name}")
            connection.delete_table(table_name, disable=True)

        # Crear nueva tabla
        connection.create_table(table_name, families)
        table = connection.table(table_name)
        print("Tabla 'used_cars' creada exitosamente")

        # 3. Cargar datos del CSV
        car_data = pd.read_csv('Car_details_v3.csv')

# Insertar datos en la tabla HBase
def insertar_datos(table, car_data):
    for index, row in car_data.iterrows():
        row_key = f'car_{index}'.encode()  # Genera la row key
        data = {
            b'basic:name': str(row['name']).encode(),
            b'basic:year': str(row['year']).encode(),
            b'basic:transmission': str(row['transmission']).encode(),
            b'basic:fuel': str(row['fuel']).encode(),
            b'specs:engine': str(row['engine']).encode(),
            b'specs:max_power': str(row['max_power']).encode(),
            b'specs:torque': str(row['torque']).encode(),
            b'specs:seats': str(row['seats']).encode(),
            b'specs:mileage': str(row['mileage']).encode(),
            b'sales:selling_price': str(row['selling_price']).encode(),
            b'sales:seller_type': str(row['seller_type']).encode(),
            b'condition:km_driven': str(row['km_driven']).encode(),
            b'condition:owner': str(row['owner']).encode()
        }
        table.put(row_key, data)
    print("Datos insertados exitosamente")

# Actualizar un dato específico en la tabla HBase
def actualizar_precio(table, row_key, nuevo_precio):
    table.put(row_key.encode(), {b'sales:selling_price': str(nuevo_precio).encode()})
    print(f"Precio actualizado para el coche con ID {row_key}")

# Eliminar un dato específico en la tabla HBase
def eliminar_dato(table, row_key):
    table.delete(row_key.encode())
    print(f"Coche con ID {row_key} eliminado de la base de datos")

            # Organizar los datos en familias de columnas
            data = {
                b'basic:name': str(row['name']).encode(),
                b'basic:year': str(row['year']).encode(),
                b'basic:transmission': str(row['transmission']).encode(),
                b'basic:fuel': str(row['fuel']).encode(),
                b'specs:engine': str(row['engine']).encode(),
                b'specs:max_power': str(row['max_power']).encode(),
                b'specs:torque': str(row['torque']).encode(),
                b'specs:seats': str(row['seats']).encode(),
                b'specs:mileage': str(row['mileage']).encode(),
                b'sales:selling_price': str(row['selling_price']).encode(),
                b'sales:seller_type': str(row['seller_type']).encode(),
                b'condition:km_driven': str(row['km_driven']).encode(),
                b'condition:owner': str(row['owner']).encode()
            }

            # Insertar los datos en HBase
            table.put(row_key, data)

        print("Datos cargados exitosamente")

        # 5. Consultas y análisis de datos
        print("\n=== Todos los coches en la base de datos (primeros 3) ===")
        count = 0
        for key, data in table.scan():
            if count < 3:
                print(f"\nCoche ID: {key.decode()}")
                print(f"Nombre: {data[b'basic:name'].decode()}")
                print(f"Año: {data[b'basic:year'].decode()}")
                print(f"Precio: {data[b'sales:selling_price'].decode()}")
                count += 1

        # 6. Encontrar coches por rango de precio
        print("\n=== Coches con precio menor a 50000 ===")
        for key, data in table.scan():
            if int(data[b'sales:selling_price'].decode()) < 50000:
                print(f"\nCoche ID: {key.decode()}")
                print(f"Nombre: {data[b'basic:name'].decode()}")
                print(f"Precio: {data[b'sales:selling_price'].decode()}")

        # 7. Análisis de propietarios
        print("\n=== Coches por tipo de propietario ===")
        owner_stats = {}
        for key, data in table.scan():
            owner = data[b'condition:owner'].decode()
            owner_stats[owner] = owner_stats.get(owner, 0) + 1

        for owner, count in owner_stats.items():
            print(f"{owner}: {count} coches")

        # 8. Análisis de precios por tipo de combustible
        print("\n=== Precio promedio por tipo de combustible ===")
        fuel_prices = {}
        fuel_counts = {}
        for key, data in table.scan():
            fuel = data[b'basic:fuel'].decode()
            price = int(data[b'sales:selling_price'].decode())

            fuel_prices[fuel] = fuel_prices.get(fuel, 0) + price
            fuel_counts[fuel] = fuel_counts.get(fuel, 0) + 1

        for fuel in fuel_prices:
            avg_price = fuel_prices[fuel] / fuel_counts[fuel]
            print(f"{fuel}: {avg_price:.2f}")

        # 9. Top 3 coches con mayor kilometraje
        print("\n=== Top 3 coches con mayor kilometraje ===")
        cars_by_km = []
        for key, data in table.scan():
            cars_by_km.append({
                'id': key.decode(),
                'name': data[b'basic:name'].decode(),
                'km': int(data[b'condition:km_driven'].decode()),
                'price': int(data[b'sales:selling_price'].decode())
            })

        for car in sorted(cars_by_km, key=lambda x: x['km'], reverse=True)[:3]:
            print(f"ID: {car['id']}")
            print(f"Nombre: {car['name']}")
            print(f"Kilometraje: {car['km']}")
            print(f"Precio: {car['price']}\n")

        # 10. Análisis de precios por tipo de transmisión
        print("\n=== Precio promedio por tipo de transmisión ===")
        transmission_prices = {}
        transmission_counts = {}

        for key, data in table.scan():
            trans = data[b'basic:transmission'].decode()
            price = int(data[b'sales:selling_price'].decode())

            transmission_prices[trans] = transmission_prices.get(trans, 0) + price
            transmission_counts[trans] = transmission_counts.get(trans, 0) + 1

        for trans in transmission_prices:
            avg_price = transmission_prices[trans] / transmission_counts[trans]
            print(f"{trans}: {avg_price:.2f}")

        # 11. Ejemplo de actualización de precio
        car_to_update = 'car_0'
        new_price = 460000
        table.put(car_to_update.encode(), {b'sales:selling_price': str(new_price).encode()})
        print(f"\nPrecio actualizado para el coche ID: {car_to_update}")

    except Exception as e:
        print(f"Error: {str(e)}")
    finally:
        # Cerrar la conexión
        connection.close()

# Ejecutar el bloque principal
if __name__ == "__main__":
    main()
